package main

import "fmt"

// Пример использования различных типов данных в Go.
// Используются основные типы данных, а также переменная типа interface{}
// и переменная типа any.
// А также демонстрируется преобразование переменной типа interface{}
// в нужный тип с помощью функции типа assert.
func main() {
	// Создаем переменную типа bool и выводим ее значение на экран.
	var b bool
	fmt.Println(b)

	// Выводим значение переменной типа string в виде []byte и []rune.
	fmt.Printf("hello => %v\n", []byte("hello"))
	fmt.Printf("hello => %v\n", []rune("hello"))

	// Выводим значение переменной типа string в виде []byte и []rune на русском.
	fmt.Printf("привет => %v\n", []byte("привет"))
	fmt.Printf("привет => %v\n", []rune("привет"))

	// Создаем переменные типа any и any.
	// Присваиваем им значения типа string и int соответственно.
	var d any = "hello world"
	var e any = 1 // int

	// Создаем переменную типа interface{} и присваиваем ей значение типа bool.
	var f interface{} = true

	// Выводим значения переменных на экран.
	fmt.Println(d, e, f)

	// Пытаемся преобразовать переменную типа interface{} в тип int.
	// Если преобразование успешно, то выводим полученное значение и true.
	// Если преобразование неуспешно, то выводим false.
	o1, ok := e.(int)
	fmt.Printf("%+v %+v\n", ok, o1)

	// Пытаемся преобразовать переменную типа interface{} в тип string.
	// Если преобразование успешно, то выводим полученное значение и true.
	// Если преобразование неуспешно, то выводим false.
	o2, ok := e.(string)
	fmt.Printf("%+v %+v\n", ok, o2)
}
